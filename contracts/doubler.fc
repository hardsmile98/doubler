#include "imports/stdlib.fc";

;; op-codes
const int op::bet = 1001;
const int op::calculate = 1002;

;; errors
const int error::insufficient_balance = 501;
const int error::invalid_address = 502;

int slices_equal? (slice a, slice b) asm "SDEQ";

const slice skip_address = "Ef94BG3tNmX8_tHtFTgmkz4c7PeCH33_cxQLbgIvvl4NoN5c"a;

() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    var cs = in_msg_full.begin_parse();
    
    var flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    if (op == op::bet) {
        send_raw_message(
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(skip_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::calculate, 32)
                .store_slice(sender)
            .end_cell(),
            0
        );
    }
    elseif (op == op::calculate ) {

    }
}